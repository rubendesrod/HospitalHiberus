version: "3.8"
services:

  #Sonarqube
  sonarqube:
    image: sonarqube:community
    hostname: sonarqube
    container_name: sonarqube
    depends_on:
      db_sonar:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db_sonar:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9090:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs

  db_sonar:
    image: postgres:13
    hostname: postgresql
    container_name: db_sonar
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    ports:
      - "5435:5432"
    volumes:
      - postgresql_sonar:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "sonar"]
      interval: 10s
      timeout: 5s
      retries: 5

  #Zipkin
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: zipkin
    ports:
      - "9411:9411"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9411/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper
  zookeeper:
    image: library/zookeeper:3.7.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-enterprise-kafka:6.1.1
    hostname: kafka
    container_name: kafka
    tmpfs: /kafka/kafka-logs
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_HEAP_OPTS: -Xmx3G -Xms1G
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_MESSAGE_MAX_BYTES: 10485880
      KAFKA_NUM_PARTITIONS: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Inicialicacion de los topics de kafka mediante comando
  init-kafka:
    image: confluentinc/cp-enterprise-kafka:6.1.1
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic historialMedico --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic facturas --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic facturasPagadas --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kowl (Interfaz Visual Kafka)
  kowl:
    image: quay.io/cloudhut/kowl:v1.4.0
    container_name: kowl
    restart: on-failure
    hostname: kowl
    volumes:
      - ./inits/kowl-config.yaml:/etc/kowl/config.yaml
    ports:
      - "8080:8080"
    environment:
      KAFKA_SCHEMAREGISTRY_ENABLED: "true"
      KAFKA_SCHEMAREGISTRY_URLS: http://localhost:8081
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      schema-registry:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # PostgreSQL para el microservicio de pacientes
  db_pacientes:
    image: postgres:latest
    container_name: db_pacientes
    environment:
      POSTGRES_USER: pacientes_user
      POSTGRES_PASSWORD: pacientes_password
      POSTGRES_DB: pacientes_db
    ports:
      - "5432:5432"
    volumes:
      - pacientes_data:/var/lib/postgresql/data
      - ./init-db/init-db-pacientes:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "pacientes_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL para el microservicio de citas
  db_citas:
    image: postgres:latest
    container_name: db_citas
    environment:
      POSTGRES_USER: citas_user
      POSTGRES_PASSWORD: citas_password
      POSTGRES_DB: citas_db
    ports:
      - "5433:5432" # Cambio del puerto para evitar conflictos
    volumes:
      - citas_data:/var/lib/postgresql/data
      - ./init-db/init-db-citas:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "citas_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL para el microservicio de medicos
  db_medicos:
    image: mysql:latest
    container_name: db_medicos
    environment:
      MYSQL_ROOT_PASSWORD: medicos_root_password
      MYSQL_DATABASE: medicos_db
      MYSQL_USER: medicos_user
      MYSQL_PASSWORD: medicos_password
    ports:
      - "3307:3306"
    volumes:
      - medicos_data:/var/lib/mysql
      - ./init-db/init-db-medicos:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "medicos_user", "-pmedicos_password"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB para microservicio historialMedico
  db_historialMedico:
    image: mongo:6.0
    container_name: db_historialMedico
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: historialmedico_db
      MONGO_INITDB_ROOT_USERNAME: historialMedico_root
      MONGO_INITDB_ROOT_PASSWORD: historialMedico_rootpassword
    volumes:
      - historialMedico_data:/data/db
      - ./inits/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL para el microservicio facturas
  db_facturas:
    image: mysql:latest
    container_name: db_facturas
    environment:
      MYSQL_ROOT_PASSWORD: facturas_root_password
      MYSQL_DATABASE: facturas_db
      MYSQL_USER: facturas_user
      MYSQL_PASSWORD: facturas_password
    ports:
      - "3308:3306"
    volumes:
      - facturas_data:/var/lib/mysql
      - ./init-db/init-db-facturas:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "facturas_user", "-pfacturas_password"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Config Server
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy

  # Gateway Server
  gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    container_name: gateway-server
    ports:
      - "9000:9000"
    environment:
      - SPRING_EUREKA_SERVER_URI=http://eureka-server:8761/eureka
      - SPRING_ZIPKIN=http://zipkin:9411
      - SPRING_MEDICOS=http://medicos-service:8082
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  # Microservicio Medicos
  medicos-service:
    build:
      context: ./medicos
      dockerfile: Dockerfile
    container_name: medicos-service
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=db_medicos
      - DB_PORT=3306
      - DB_USER=medicos_user
      - DB_PASSWORD=medicos_password
      - DB_NAME=medicos_db
    depends_on:
      db_medicos:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  # Pacientes Service
  pacientes-service:
    build:
      context: ./pacientes
      dockerfile: Dockerfile
    container_name: pacientes-service
    ports:
      - "8086:8086"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db_pacientes:5432/pacientes_db
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_EUREKA_SERVER_URI=http://eureka-server:8761/eureka
      - SPRING_ZIPKIN=http://zipkin:9411
    depends_on:
      db_pacientes:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  # Citas Service
  citas-service:
    build:
      context: ./citas
      dockerfile: Dockerfile
    container_name: citas-service
    ports:
      - "8083:8083"
    environment:
      - MEDICOS_SERVICE_URL=http://medicos-service:8082
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_EUREKA_SERVER_URI=http://eureka-server:8761/eureka
      - SPRING_ZIPKIN=http://zipkin:9411
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db_citas:5432/citas_db
      - SPRING_SCHEMA_REGISTRY=http://schema-registry:8081
      - SPRING_KAFKA_SERVER=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      db_citas:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  # Consultador Facturas Service
  consultadorfacturas-service:
    build:
      context: ./consultador-facturas
      dockerfile: Dockerfile
    container_name: consultadorFacturas-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db_facturas:3306/facturas_db?allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_EUREKA_SERVER_URI=http://eureka-server:8761/eureka
      - SPRING_ZIPKIN=http://zipkin:9411
    depends_on:
      db_facturas:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  # Consultador Historial Medico Service
  consultadorhistorial-service:
    build:
      context: ./consultador-historialMedico
      dockerfile: Dockerfile
    container_name: consultadorHistorialMedico-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_EUREKA_SERVER_URI=http://eureka-server:8761/eureka
      - SPRING_ZIPKIN=http://zipkin:9411
      - SPRING_DATASOURCE_URL=mongodb://historialmedico_user:historialmedico_password@db_historialMedico:27017/historialmedico_db
    depends_on:
      db_historialMedico:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  # Consumer Factura Service
  consumerfactura-service:
    build:
      context: ./consumer-factura
      dockerfile: Dockerfile
    container_name: consumerFactura-service
    ports:
      - "8089:8089"
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_EUREKA_SERVER_URI=http://eureka-server:8761/eureka
      - SPRING_ZIPKIN=http://zipkin:9411
      - SPRING_DATASOURCE_URL=jdbc:mysql://db_facturas:3306/facturas_db?allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_SCHEMA_REGISTRY=http://schema-registry:8081
      - SPRING_KAFKA_SERVER=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      db_facturas:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy

  # Consumer Historial Medico Service
  consumerhistorial-service:
    build:
      context: ./consumer-historialMedico
      dockerfile: Dockerfile
    container_name: consumerHistorial-service
    ports:
      - "8088:8088"
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_EUREKA_SERVER_URI=http://eureka-server:8761/eureka
      - SPRING_ZIPKIN=http://zipkin:9411
      - SPRING_DATASOURCE_URL=mongodb://historialmedico_user:historialmedico_password@db_historialMedico:27017/historialmedico_db
      - SPRING_SCHEMA_REGISTRY=http://schema-registry:8081
      - SPRING_KAFKA_SERVER=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      db_historialMedico:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      zipkin:
        condition: service_healthy

# Volumenes para la persistencia de los datos en la DB
volumes:
  pacientes_data:
  citas_data:
  medicos_data:
  historialMedico_data:
  facturas_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql_data:
  postgresql_sonar:
